
#----------------------------------------------------------------------#
# FILE:    clam14 - drawing perfect color patterns                     #
# AUTHOR:  Douglas Roberts -- droberts                                 #
# CREATED: Sun Sep 15 09:51:05 EDT 2019                                #
# PURPOSE: color changes in sync with N E W S directions. kinda.       #
#          which RGB is randomized, but the brightness rises or        #
#          falls in concert with the direction.                        #
#          the glyph can go in 8 directions,                           #
#          which does not lend itself well to a 3 color scheme.        #
#          there are only 2 directions for overlap, but, if you        #
#          fade 2 colors at once, you hit black or white too often.    #
#          no other information appears on the screen.                 #
# STATUS:  ★ ★ ★ ★ ★  my current favorite.                             #
#----------------------------------------------------------------------#

csc_x=0
csc_y=0

# modulo-ish for which color-idx chart column we are printing
csc_cloopty=2

#----------------------------------------------------------------------#
# bump only 1 RGB value up or down. check bounds.                      #
# XXX: if we reach bounds, do we switch colors or punt? for now, punt. #
# Thu Nov 21 21:51:26 EST 2019 -- "punting" seems fine.                #
#----------------------------------------------------------------------#
function bump_fade
{
local r g b
decode_color_idx

#----------------------------------------------------------------------#
# select random RGB value to fade.                                     #
# if going to force a movement, here is the spot. QQQ                  #
#----------------------------------------------------------------------#
(( rgb_idx = RANDOM % 3 ))
case $rgb_idx in
    0) bump_fade_direction r ;;
    1) bump_fade_direction g ;;
    2) bump_fade_direction b ;;
esac

#----------------------------------------------------------------------#
# recalculate the color index                                          #
#----------------------------------------------------------------------#
(( color_idx = ( r * 36 ) + ( g * 6 ) + b + 16 ))

return
}



function set_csc_x
{
# keep the color-idx-chart to just 2 columns
# on the right side of the window
case $csc_cloopty in
    1) csc_cloopty=2 ;;
    2) csc_cloopty=1 ;;
esac
csc_cloopty=1 ### QQQ - for 1 column only
(( csc_x = COLUMNS - ( csc_cloopty * 12 ) ))
}
# (gets set to 1)
set_csc_x


function clam14_show_color
{
debug

tput cup $csc_y $csc_x
line=$( printf " %4.4s " $color_idx )
printc -n black,$color_idx "$line"
printc -n $color_idx,black "$line"
(( csc_y += 1 ))
if [[ $csc_y -ge $LINES ]]; then
    csc_y=0
    set_csc_x
fi
}


#----------------------------------------------------------------------#
# for provided color, r, g or b...                                     #
# increment or decrement based on fade_direction value.                #
# check for bounds: 0 - 5                                              #
#----------------------------------------------------------------------#
function bump_fade_direction
{
local rgb
eval rgb=\$$1
(( rgb += fade_direction ))
if [[ $rgb -gt 5 ]]; then
    rgb=5
elif [[ $rgb -lt 0 ]]; then
    rgb=0
fi
eval ${1}=$rgb
#----------------------------------------------------------------------#
# echo $rgb $fade_direction                                            #
#----------------------------------------------------------------------#
return
}


#----------------------------------------------------------------------#
# this function draw the next character.                               #
# it selects direction randomly and then calculates the new color      #
# based upon the direction the drawing is headed.                      #
#----------------------------------------------------------------------#
function wander
{
local _x _y
local prev_color_idx=$color_idx

#----------------------------------------------------------------------#
# select new direction: N E W S NE NW SE SW                            #
#----------------------------------------------------------------------#
_x=0
_y=0

while [[ $_x -eq 0 && $_y -eq 0 ]]; do
    (( _x = ( RANDOM % 3 ) - 1 ))
    (( _y = ( RANDOM % 3 ) - 1 ))
done

(( random_loop_count = RANDOM % 4 ))

init random_loop_counter
while [[ $random_loop_counter < $random_loop_count ]]; do
    incr random_loop_counter

    #----------------------------------------------------------------------#
    # if not going N or S, go 2 squares left or right.                     #
    #----------------------------------------------------------------------#
    if [[ $_y -eq 0 ]]; then
        (( _x = _x * 2 ))
    fi
    
    #----------------------------------------------------------------------#
    # determine direction for color fade.                                  #
    #----------------------------------------------------------------------#
    if [[ $_x -lt 0 ]]; then
        # get brighter
        fade_direction=1
    elif [[ $_x -eq 0 && $_y -eq 1 ]]; then
        fade_direction=1
    else
        # get darker
        fade_direction=-1
    fi
    
    #----------------------------------------------------------------------#
    # calculate new position                                               #
    #----------------------------------------------------------------------#
    (( xpos += _x ))
    (( ypos += _y ))
    
    #----------------------------------------------------------------------#
    # boundary checking.                                                   #
    # if we bump up against the sides, go the other way.                   #
    #----------------------------------------------------------------------#
    if [[ $ypos -lt 0 ]]; then
        ypos=1
    fi
    
    if [[ $ypos -ge $LINES ]]; then
        (( ypos -= 2 ))
    fi
    
    if [[ $xpos -lt 0 ]]; then
        xpos=1
    fi
    
    if [[ $xpos -ge $COLUMNS ]]; then
        (( xpos -= 2 ))
    fi
    
    previous_color_idx=$color_idx
    bump_fade
    
    #----------------------------------------------------------------------#
    # go to next spot and print the character                              #
    #----------------------------------------------------------------------#
    tput cup $ypos $xpos
    #----------------------------------------------------------------------#
    # echo -n "[${_g};5;${color_idx}m@ [m"                               #
    # echo -n "[${_g};5;${color_idx}m [m"                               #
    #----------------------------------------------------------------------#
    echo -n " [${_g};5;${color_idx}m${_ball}[m"
    
    if [[ $show_display == true ]]; then
        clam14_show_color
    fi
    
    if [[ $color_idx -gt 231 || $color_idx -lt 16 ]]; then
        tput cup 0 $COLUMNS
        echo
        echo algorithm problems:
        echo current color_idx:
        print_color_info
        color_idx=$previous_color_idx
        echo previous color_idx:
        print_color_info
        print_sep =
        exit 9
    fi
done

return
}



function main_loop
{
local num=0
#----------------------------------------------------------------------#
# center the cursor                                                    #
#----------------------------------------------------------------------#
tput clear
(( xpos = COLUMNS / 2 ))
(( ypos = LINES / 2 ))
csc_y=0 ### y-axis-for-color-chart-to-start-at must be reset.
#----------------------------------------------------------------------#
# tput cup $ypos $xpos                                                 #
#----------------------------------------------------------------------#
tput cup 0 0
compute_char_max

#----------------------------------------------------------------------#
# MAIN WHILE LOOP                                                      #
#----------------------------------------------------------------------#
while [[ $num -lt ${char_max:-199} ]]; do
    wander
    (( num += 1 ))
done

#----------------------------------------------------------------------#
# fini and place the cursor at a good spot.                            #
#----------------------------------------------------------------------#
tput cup 0 0
return
}


function loopty_loop
{
local num=0

while [[ $num -lt 22 ]]; do
    main_loop
    csc_cloopty=2
    set_csc_x
    sleep 3
done
}


#----------------------------------------------------------------------#
# MAIN                                                                 #
#----------------------------------------------------------------------#
# initialize color palette.
# pick a color scheme or not . . .                                     #
#----------------------------------------------------------------------#
. clam14_test
show_display=false

for arg in $* ; do
    case $1 in
        (-n) show_display=false ;;
        (-s) show_display=true ;;
    #----------------------------------------------------------------------#
    # test color fading                                                    #
    #----------------------------------------------------------------------#
        (-t)
            color_idx=${1:-201}
            test_bump_fading
            exit
            ;;
    
        (-T)
            . clam14_test
            test_bump_fade_direction
            exit
            ;;

#----------------------------------------------------------------------#
# deal with foreground/background coloring                             #
#----------------------------------------------------------------------#
        (48|f|fg|fore*) _g=48 ;; # for light terminals
        (38|b|bg|back*) _g=38 ;; # for dark terminals

        (-h|--help|*)
            echo usage: $0 '[-s] [-n] [-T] [-t]'
            echo where:
            cat << EOF
-n means suppress printing of color-index-chart
-s show color-index-chart
( last argument wins )

-T test the color fade + direction feature
-t test the color fade only
(algorithm is called "bump")
EOF
            exit
            ;;

        (-n) show_display=false
            exit
            ;;
    
    esac
done
    
. colors.env
. yaps1

_g=48 # for light terminals
_g=38 # for dark terminals
_g=${2:-$_g}

(( color_idx = ( RANDOM % (256 - 232 )) + 16 ))
_ball=•
_ball=⚬
_ball=☀
_ball=☁
_ball=★
_ball=☆
_ball=☼
_ball=☽
_ball=☾
_ball=♦
_ball=' '
_ball=⚈
_ball=⬤ 
_ball=@
loopty_loop

