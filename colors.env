#!/bin/bash
#----------------------------------------------------------------------#
# FILE:    colors.env                                                  #
# AUTHOR:  Douglas Roberts -- droberts                                 #
# CREATED: Wed Mar  6 11:12:06 EST 2019                                #
# PURPOSE: collection of neat color patterns.                          #
# NOTES:   collected from ccat and yaps1                               #
# TODO:    add the random algorithm.                                   #
#                                                                      #
#----------------------------------------------------------------------#

. more_funx

DEBUG=color ; CLEAR=print_sep
DEBUG= ; CLEAR=:

color_idx=0
_idx=0
pound=0
_g=${_g:-38}
r=0
g=0
b=0
fade_direction=0


function clean_exit
{
tput cup $LINES $COLUMNS
echo "[m" done
exit
}


trap clean_exit 1 2 3


#----------------------------------------------------------------------#
# toggle target background / foreground for colorization.              #
#----------------------------------------------------------------------#
function toggle_ground
{
_g=${_g:-48}
case $_g in
    48) _g=38 ;;
    *) _g=48 ;;
esac
}



function next_color
{
color_value=${fgs[$color_idx]}
(( color_idx += 1 ))
if [[ $color_idx -ge $pound_fgs ]]; then
    color_idx=0
fi
}


function compute_next_random
{
while :; do
    (( red   = RANDOM % 6 ))
    (( green = RANDOM % 6 ))
    (( blue  = RANDOM % 6 ))
    (( next_color_idx = ( red * 36 ) + ( green * 6 ) + blue + 16 ))
    if is_not_too_dark ; then
        break
    fi
done
return
}


function compute_random_fgs
{
local num=0
while [[ $num -lt 100 ]]; do
    compute_next_random
    fgs[num]=$next_color_idx
    (( num += 1 ))
done
return
}


#----------------------------------------------------------------------#
# do not use dark reds, dark blues or the system colors                #
# the algorithm should handle < 16 and > 231                           #
#----------------------------------------------------------------------#
function is_not_too_dark
{
debug
#----------------------------------------------------------------------#
# echo -n "@ " 1>&2                                                    #
#----------------------------------------------------------------------#
next_color_idx=${1:-${next_color_idx}}
case $next_color_idx in
     16 | 17 | 52 | 58 | 59 | 88 ) false ;;
    *) true ;;
esac
}


#----------------------------------------------------------------------#
# so named because it is MOST-LIKELY the final fading algorithm        #
# that i will write. it basically adds a single value to a single      #
# color for 2 or 3 steps and then moves on UNTIL it reaches the        #
# beginning again. in other words, this thing could create over 1000   #
# colors in the color-map easily. i have never seen it NOT return      #
# to the beginning, but theoretically, it could happen...              #
#----------------------------------------------------------------------#

#----------------------------------------------------------------------#
# idea is to produce a random path like this through 3-D color space:  #
#                                                                      #
#  --->                                        -->                     #
#  GGGG                 B ^ -> R -> R -> R -> RGGG                     #
#     B |               B |                      B |                   #
#     B |               B |            R <- R <- B V                   #
#     B V -> R -> R -> RGGGGR                                          #
#                       <---                                           #
#                                                                      #
# ... that randomly proceeds until it snakes around to the beginning.  #
#----------------------------------------------------------------------#
function compute_fgs_fade
{
debug
#----------------------------------------------------------------------#
# array of current RGB position values.                                #
#----------------------------------------------------------------------#
declare -a rgb_pos
idx=0

#----------------------------------------------------------------------#
# slight seeding issue to avoid the dark colors.                       #
#----------------------------------------------------------------------#
while : ; do
    (( pos = RANDOM % 6 ))
    rgb_pos[0]=$pos
    red=${rgb_pos[0]}
    (( pos = RANDOM % 6 ))
    rgb_pos[1]=$pos
    green=${rgb_pos[1]}
    (( pos = RANDOM % 6 ))
    rgb_pos[2]=$pos
    blue=${rgb_pos[2]}
    (( next_color_idx = ( red * 36 ) + ( green * 6 ) + blue + 16 ))
    if is_not_too_dark ; then
        break
    fi
done

#----------------------------------------------------------------------#
# start with a random color, R G or B                                  #
#----------------------------------------------------------------------#
(( rgb_idx = RANDOM % 3 ))
(( prev_rgb_idx = RANDOM % 3 ))

#----------------------------------------------------------------------#
# build array of color values                                          #
#----------------------------------------------------------------------#
idx=0
fgs[0]=-19
next_color_idx=-21

#----------------------------------------------------------------------#
# while the next-color-idx has not returned to the beginning...        #
#----------------------------------------------------------------------#
while :; do

    # select different random color RGB index
    while [[ $rgb_idx -eq $prev_rgb_idx ]]; do
        (( rgb_idx = RANDOM % 3 ))
    done
    prev_rgb_idx=$rgb_idx

    # grab current position for that RGB color
    current_rgb_pos=${rgb_pos[rgb_idx]}

    # select random direction and steps
    (( new_pos = RANDOM % 6 ))

#----------------------------------------------------------------------#
# force the color fade to use a different color each time              #
#----------------------------------------------------------------------#
#     while [[ $current_rgb_pos -eq $new_pos ]]; do                    #
#         (( new_pos = RANDOM % 6 ))                                   #
#     done                                                             #
#----------------------------------------------------------------------#

    # determine direction
    steps=1
    if [[ $current_rgb_pos -gt $new_pos ]]; then
        steps=-1
    fi

    # increment steps, add each value to array.
    while [[ $current_rgb_pos -ne $new_pos ]]; do
        (( current_rgb_pos += steps ))
        rgb_pos[rgb_idx]=$current_rgb_pos
        red=${rgb_pos[0]}
        green=${rgb_pos[1]}
        blue=${rgb_pos[2]}
        (( next_color_idx = ( red * 36 ) + ( green * 6 ) + blue + 16 ))
        if [[ $next_color_idx -eq ${fgs[0]} ]]; then
#----------------------------------------------------------------------#
#           echo RETURNED TO THE BEGINNING: $next_color_idx ${fgs[0]}  #
#----------------------------------------------------------------------#
            break
        fi
        # do not use dark reds, dark blues or the system colors
        if is_not_too_dark ; then
#----------------------------------------------------------------------#
#             echo ADDING $idx $next_color_idx ==\> $red $green $blue  #
#----------------------------------------------------------------------#
            fgs[idx]=$next_color_idx
            (( idx += 1 ))
        else
            # we hit a dark spot. break out of here and
            # that last idx will be overwritten next loop
            (( current_rgb_pos -= steps ))
            rgb_pos[rgb_idx]=$current_rgb_pos
            break
        fi
    done

#----------------------------------------------------------------------#
# if we have at least 8 colors, and we have cycled then... bail.       #
#----------------------------------------------------------------------#
if [[ $idx -ge 8 ]]; then
    if [[ $next_color_idx == ${fgs[0]} ]]; then
        break
    fi
fi
done
return
}



#----------------------------------------------------------------------#
# 232  233  234  235  236  237  238                                    #
# 239  240  241  242  243  244  245                                    #
# 246  247  248  249  250  251  252                                    #
# 253  254  255                                                        #
#----------------------------------------------------------------------#

function grayscale
{
local x=232
local idx=0
while [[ $x -lt 256 ]]; do
    printc -n black,$x " $x "
    fgs[idx]=$x
    incr idx
    incr x
done
follow_grab_colors
echo
}


#----------------------------------------------------------------------#
# NOTES: TO DO: how to set options?!                                   #
#----------------------------------------------------------------------#
function grab_colors_reduced_set
{
debug
_max=19
if [[ -n $1 ]]; then
    _idx=$1
else
#----------------------------------------------------------------------#
# random selection unless specifically selected.                       #
#----------------------------------------------------------------------#
    (( _idx = ( RANDOM % _max ) + 1 ))
fi

#----------------------------------------------------------------------#
# not as elegant as i had hoped:                                       #
#----------------------------------------------------------------------#

case $_idx in
    1) fgs=(
        107 143 179 173 167 131 96  102
        108 144 180 174 168 132 97  103
        109 145 181 175 169 133 98  104
        110 146 182 176 170 134 99  105
        111 147 183 177 171 135 98  97
        96  95  101
        ) ;;

    2) fgs=(
        22  28  34  70  106 100 94  58
        23  29  35  71  107 101 95  59
        24  30  36  72  108 102 96  60
        25  31  37  73  109 103 97  61
        26  32  38  74  110 104 98  62
        27  33  39  75  111 105 99  63
        26  25  24  23
        ) ;;

    3) fgs=(
        124 160 196 202 208 202 196 160
        125 161 167 173 209 203 197 161
        126 132 138 174 210 204 198 162
        127 133 139 175 211 205 199 163
        128 134 140 176 212 206 200 164
        129 135 141 177 213 207 201 165
        128 127 126 125
        ) ;;

    4) fgs=(
         19  25  31  30  29  23  54  55
         61  67  66  65  59  89  90  91
         97 103 102 101  95 125 126 127
        133 139 138 137 131 161 162 163
        169 175 174 173 167 203 197 198
        199 205 211 210 209 203 161 125
         89  90  91  55
        ) ;;

    5) fgs=(
        89 90 54 22 58  94  95  96
        60 24 23 28 64 100 101 102
        66 30 29 34 70 106 107 108
        72 36 35 40 76 112 113 114
        78 42 41 46 82 118 119 120
        84 48 47 40 34  28  22
        ) ;;

    6) fgs=(
         54  53  89 125 161
        197 161 125  89  53
         89 125 161 197 198
        199 200 201 165 129
         93  57  21  20  19
        ) ;;

    7) fgs=(
        19 55  91  92  93 57 21 20
        25 61  97  98  99 63 27 26
        31 67 103 104 105 69 33 32
        37 73 109 110 111 75 39 38
        43 79 115 116 117 81 45 44
        49 85 121 122 123 87 51 50
        43 37  31  25
        )
        ;;

    8) fgs=(
         22  28  29  30  24  23  59  58
         64  65  66  60  54  90  89  95
         94 100 101 102  96  90  89 125
        124 130 136 137 138 132 126 125
        160 166 172 173 174 168 162 161
        196 202 208 209 210 204 198 197
        160 124 130 136 142 148 154 118
         82  46  40  34  28
        )
        ;;

    9) fgs=(
         46  41 36  31  26  21  57  62
         67  72 77  82 118 118 113 108
        103  98 93 129 134 139 144 149
        154 118 82
        )
        ;;

    10) fgs=(
         46  47  48  49  50
         51  45  39  33  27
         21  57  93 129 165
        201 200 199 198 197
        196 202 208 214 220
        226 190 154 118  82
        )
        ;;

    # yap_greens 
    11) fgs=( 43 44 49 50 79 80 85 86 115 116 121 122 ) ;;

    # fireball
    12) fgs=( 202 208 214 220 221 185 186 192 191 190 184 178 172 166 130 ) ;;

    # browns
    13) fgs=( 58 59 60 65 66 94 95 96 101 102 130 131 137 138 173 
        174 179 180 181 187 209 215 216 ) ;; 

    # really cool pastel shades
    14) fgs=(
        101 107 113 119 120 121 122 123 117 111
        105 104 103 102  66  30  36  42  78 114 150
        186 150 114  78  79  80 116 152 146 140 176
        175 174 173 172 178 214 220 226 227 228 229
        219 213 207 201 165 171 170 169
        133  97  96  95
        ) ;;             

    # other dimension rainbow (36-1-6)
    # (with some tweaks for smoothness)
    # all other 4 combinations of dimensional directions
    # result in reflective patterns
    # TODO: 3-D this thing? basically, we are
    # traversing 6 of the 8 verticies of the color cube.
    15) fgs=(
         46  82 118 154 190 226 227 228 
        225 219 213 207 201 165 129  93  57  27  26
         25  24  23  29  28  34  40
        ) ;;

    16) fgs=(
        42 48 50 45 39 68 69 75 82 85 87 118 129 117 105 )
        ;;

    # yap_rainbow_bright
    17|rainbow|rainbow_bright)
	fgs=( 201 93 21 33 51 48 46 118 226 208 196 198 )
        ;;

    18|grayscale|greyscale)
        for (( x=232, num=0 ; x <= 255 ; x++, num++ )); do
            fgs[num]=$x
        done
	;;

    # default 2-tone
    # this is currently somehow creating an array of 3?!
    *) fgs=( 42 201 ) ;; # should be bright green and purple
esac
follow_grab_colors
return
}



function grab_colors
{
debug
_max=35
if [[ -n $1 ]]; then
    _idx=$1
else
    (( _idx = ( RANDOM % _max ) + 1 ))
fi
#----------------------------------------------------------------------#
# vecho _idx                                                           #
#----------------------------------------------------------------------#

case $_idx in

    1) fgs=(
         22  28  29  30  24  23  59  58
         64  65  66  60  54  90  89  95
         94 100 101 102  96  90  89 125
        124 130 136 137 138 132 126 125
        160 166 172 173 174 168 162 161
        196 202 208 209 210 204 198 197
        160 124 130 136 142 148 154 118
         82  46  40  34  28
        )
        ;;

    2) fgs=(
        19 55  91  92  93 57 21 20
        25 61  97  98  99 63 27 26
        31 67 103 104 105 69 33 32
        37 73 109 110 111 75 39 38
        43 79 115 116 117 81 45 44
        49 85 121 122 123 87 51 50
        43 37  31  25
        )
        ;;

    3) fgs=(
         54  53  89 125 161
        197 161 125  89  53
         89 125 161 197 198
        199 200 201 165 129
         93  57  21  20  19
        ) ;;

    4) fgs=(
        89 90 54 22 58  94  95  96
        60 24 23 28 64 100 101 102
        66 30 29 34 70 106 107 108
        72 36 35 40 76 112 113 114
        78 42 41 46 82 118 119 120
        84 48 47 40 34  28  22
        ) ;;

    5) fgs=(
         19  25  31  30  29  23  54  55
         61  67  66  65  59  89  90  91
         97 103 102 101  95 125 126 127
        133 139 138 137 131 161 162 163
        169 175 174 173 167 203 197 198
        199 205 211 210 209 203 161 125
         89  90  91  55
        ) ;;

    6) fgs=(
        124 160 196 202 208 202 196 160
        125 161 167 173 209 203 197 161
        126 132 138 174 210 204 198 162
        127 133 139 175 211 205 199 163
        128 134 140 176 212 206 200 164
        129 135 141 177 213 207 201 165
        128 127 126 125
        ) ;;

    7) fgs=(
        22  28  34  70  106 100 94  58
        23  29  35  71  107 101 95  59
        24  30  36  72  108 102 96  60
        25  31  37  73  109 103 97  61
        26  32  38  74  110 104 98  62
        27  33  39  75  111 105 99  63
        26  25  24  23
        ) ;;

    8) fgs=(
        107 143 179 173 167 131 96  102
        108 144 180 174 168 132 97  103
        109 145 181 175 169 133 98  104
        110 146 182 176 170 134 99  105
        111 147 183 177 171 135 98  97
        96  95  101
        ) ;;

    # other dimension rainbow (36-1-6)
    # (with some tweaks for smoothness)
    # all other 4 combinations of dimensional directions
    # result in reflective patterns
    # TODO: 3-D this thing? basically, we are
    # traversing 6 of the 8 verticies of the color cube.
    9) fgs=(
         46  82 118 154 190 226 227 
        225 219 213 207 201 165 129  93  57  27  26
         25  24  23  29  28  34  40
        ) ;;

    # really cool pastel shades
    10) fgs=(
        101 107 113 119 120 121 122 123 117 111
        105 104 103 102  66  30  36  42  78 114 150
        186 150 114  78  79  80 116 152 146 140 176
        175 174 173 172 178 214 220 226 227 228 229
        219 213 207 201 165 171 170 169
        133  97  96  95
        ) ;;             

    # just a really cool fade pattern
    11) fgs=(
        227 191 155 119  83  47  41  35  29  30  31
         67 103 139 175 169 163 199 205 211 217 218
        212 211 210 216 215 216 210 204 203 167 131
        132 133 134 135 141 140 134 128 127  91  55
         19  18  54  60  66  72  73  74  80 116 152
        188 194 158 122  86  50  51  87 123 159 153
        147 141 135 129  93  92 128 127 126 125 131
        137 143 179 215 209 203 167 131 137 143 179
        215 216 222 228 229 195 159 195 194
        193 192 191 190 184 185 186 187 188 189 183
        177 171 165 201 207 171 135 134 170 206 205
        204 203 202 203 204 205 169 133  97  61  67
         73  79  85 121 157 193 229 193 157 121  85
         49  43  37  73  67 103 139 138 137 136 142
        148 154 148 142 136 130  94 100 106 112 118
        119 120 121 122 123 159 195 195 
        229 228 192 156 120  84  48  42  36  30  31
         67 103 139 175 211 217 223 229 193 192 191
        190 184 178 172 178 184 190 191 185 179 143
        107  71  35  36  37  38  37  36  35  34  70
        106 142 178 214 215 216 217 218 182 146 152
        151 145 139 133 127 126 132 138 144 150 149
        143 137 131 167 203 197 161 125  89  53  54
         60  24  25  26  27  63  99 135 171 207 206
        205 169 133  97  61  25  24  23  22  23  24
         25  24  30  36  42  48  49  50  44  38  37
         36  35  41  47  83  77 113 112 118 154 155
        156 150 144 138 139 140 134  98  62  56  57
         56  55  54  53  89 125 161 197 203 209 215
        179 143 107  71  35  34  40  76  77  41  35
         29  30  31  32  68  67  66  65  64  70  76
         82 118 112 106 100  94  95  96  97  98  99
         63  27  21  57  93 129 165 201 200 199 198
        197 161 125 126 127 128  92  56  20  19  55
         56  57  63  62  61  60  66  72  78 114 115
        116 122 121 120 119 118 112 106 100 101 102
        103  97  91  90  96 132 138 144 150 156 120
         84  83  82  76  70  64  65  66  67 103 104
         68  62  98 134 170 206 205 204 203 209 210
        211 205 199 198 197 196 202 208 214 220 226
        190 154 118  82  46  40  34  28  22  23  24
         25  26  25  31  37  43  49  48  47  46  40
         34  28  29  23  24  25  26  27  33  39  45
         81  80  79  78  84  85  86 122 121 120 119
        155 191 185 179 173 167 161 125  89  53  54
         90 126 162 163 127  91  97 103 104 140 176
        212 176 140 134 128 127 163 199 200 201 200
        199 198 162 161 125  89  53  54  90 126 162
        163 169 175 181 187 193 157 121  85  49  43
         37  36  35  41  47  83 119 155 191
        ) ;;

#----------------------------------------------------------------------#
# algorithm: random fade                                               #
# number-of-colors: 660                                                #
# starting-idx: 146                                                    #
# RGB-IDX: R-36 G-6 B-1                                                #
#----------------------------------------------------------------------#
    12) fgs=(
            169 175 181 187 193 157 121  85  84  83 119
            113  77  71  65 101 137 173 209 210 211 212
            213 177 141 105  69  33  27  21  20  56  92
            128 134 140 146 152 158 122 121 120 119 113
            107 101  95  96  97  98 134 170 206 212 218
            224 188 152 151 150 156 155 154 190 191 192
            186 150 114  78  42  43  44  45  81 117 153
            159 158 157 156 120 119 113 112 106 100  94
             95  96 102 108 114 150 144 138 132 126 127
            133 139 145 151 157 121  85  49  85 121 157
            193 192 191 190 154 118  82  46  40  76 112
            148 149 143 144 145 146 147 183 189 195 159
            123  87  86  85  84  83  82  46  82 118 119
            120 121 122 123  87  51  45  39  33  69  75
             81  87 123 159 158 157 156 120 114 113 112
            113 114 115 151 187 223 222 221 215 209 203
            167 161 125  89  53  54  60  66  72  71  70
            106 107 108 109 110 116  80  74  68  62  56
             20  26  32  38  44  80 116 152 188 224 188
            152 116  80  44  43  42  41  77  71  65  66
             67  68 104 110 116 115 114 113 149 185 221
            222 223 224 225 189 153 117  81  45  39  33
             27  21  20  19  18  24  30  31  32  33  32
             31  30  29  28  34  40  46  47  48  49  43
             37  31  25  19  25  31  37  73  79  85  86
            122 158 194 230 224 188 182 176 170 134  98
            104 110 109 108 107 113 119 120 121 157 193
            229 228 227 226 190 154 155 156 157 158 152
            151 150 149 143 137 131 125  89  95 101 107
            113 114 115 116 117 111 105  99  93  92 128
            164 200 206 170 134  98  62  26  32  68 104
            140 176 175 174 173 137 101  95 131 167 203
            209 215 214 208 202 166 172 178 179 173 167
            161 162 198 162 126  90  54  55  56  57  93
            129 135 171 207 213 219 225 224 218 182 181
            187 193 157 121  85  49  43  37  31  25  19
             55  91 127 163 162 161 125  89  53  54  55
             91 127 163 199 163 127 133 139 145 151 157
            121  85  49  43  37  36  35  71 107 143 179
            215 216 217 218 217 216 215 214 215 209 208
            172 136 100 101 102 108 109 110 104  98  97
             96  60  24  25  26  62  98 134 133 132 131
            167 203 202 208 214 208 214 208 202 196 160
            124 125 126 127 128 129 128 127 126 132 131
            130 136 142 106  70  71  72  73  67  61  97
            133 134 170 206 212 218 182 181 145 109  73
             37  73  74  75  39  45  81 117 153 189 225
            224 223 222 221 215 209 203 197 198 199 200
            201 165 129  93  99 105 111 117 123 122 121
            120 121 115 109 103 139 175 211 205 199 198
            197 196 160 124 130 136 142 148 112 106 142
            143 144 145 146 147 141 177 213 212 211 175
            139 103  67  31  37  43  79 115 151 187 223
            217 211 205 199 163 127  91  97 103 139 175
            139 103 104 105  99 135 141 147 153 159 158
            157 193 229 223 217 211 212 213 177 141 105
             69  33  32  31  30  66 102 138 174 168 167
            166 202 208 172 136 100  64  28  64 100 136
            172 173 174 175 176 177 183 189 195 194 158
            194 193 192 191 185 179 215 209 203 204 205
        ) ;;

#----------------------------------------------------------------------#
# algorithm: random fade                                               #
# number-of-colors: 326                                                #
# starting-idx: 157                                                    #
# RGB-IDX: R-36 G-6 B-1                                                #
#----------------------------------------------------------------------#
    # fade1
    13) fgs=(
            163 164 200 201 165 129  93  57  63  69
             75 111 117 123 122 121 120 119 118 112
            148 184 220 221 222 223 187 151 115  79
             43  79  43  37  31  25  61  97 133 169
            170 134 140 176 212 211 175 176 140 104
             68  32  26  20  56  92 128 134 140 139
            103  67  73 109 145 139 103  67  31  37
             73 109 103  97  91 127 133 139 145 151
            157 121  85  84  83  82 118 112  76  40
             41  42  36  30  24  18  24  60  96 132
            168 174 180 186 192 156 150 144 143 142
            148 154 190 191 192 193 194 195 189 188
            187 186 185 149 113  77  76  82 118 112
            106 107 108  72  36  30  66 102 138 174
            180 186 192 156 120  84  78  72  66  60
             61  62  68  74  80  86  85  84  83  82
            118 154 148 149 150 151 152 153 147 141
            135 134 133 132  96  60  24  25  31  37
             43  49  48  47  46  82 118 154 190 226
            220 214 208 202 203 209 215 221 222 216
            180 144 108  72  36  72 108 144 180 174
            175 176 182 146 140 134 133 132 131 130
            124 125 126 127 128 129  93  92  91  90
             89  95 101 102 103 109 115 121 157 193
            229 223 187 151 115  79  43  37  31  25
             24  25  61  97 133 169 175 181 187 193
            187 181 175 169 133 127 126 132 138 137
            143 179 215 214 208 172 136 100 101 102
            103 104 103 102 101 137 173 209 210 216
            217 218 219 225 189 153 117  81  45  39
             45  51  87 123 159 195 231 225 219 183
            147 111 117 123 122 121 157 156 155 149
            185 179 173 167 161 162 )
        ;;

    # white
    14|white) fgs=( 255 ) ;;

    # browns
    15|browns) fgs=( 58 59 60 65 66 94 95 96 101 102 130 131 137 138 173 174 179 180 181 187 209 215 216 ) ;;

    # fireball
    16|fireball) fgs=( 202 208 214 220 221 185 186 192 191 190 184 178 172 166 130 ) ;;

    17) fgs=(
         46  47  48  49  50
         51  45  39  33  27
         21  57  93 129 165
        201 200 199 198 197
        196 202 208 214 220
        226 190 154 118  82
        )
        ;;

    # yap_greens
    18) fgs=( 43 44 49 50 79 80 85 86 115 116 121 122 )
        ;;


    # yap_bright_rainbow
    19) fgs=(
         46  47  48  49  50
         51  45  39  33  27
         21  57  93 129 165
        201 200 199 198 197
        196 202 208 214 220
        226 190 154 118  82
        )
        ;;

#----------------------------------------------------------------------#
# list of lists of colors, pegged to a descriptive XXX) # name.        #
#----------------------------------------------------------------------#
    # roger dean greens aquas
    20) fgs=( 46 47 48 49 50 51 45 44 43 42 41 40 ) ;;

    # aquas and purples
    21) fgs=( 27 63 99 135 171 207 201 165 129 93 57 21 ) ;;

    22) # greens, aquas and purples
    fgs=( 46 47 48 49 50 51 45 44 43 42 41 40 
          27 63 99 135 171 207 201 165 129 93 57 21 )
    ;;

    # yap_pastels1
    23) fgs=(
         45  49  50  51  80
         81  86  87 116 117
        121 122 123 156 157
        158 159 219 223 
        251 252 253
        ) 
        ;;

     # yap_pastels2
    24) fgs=(
          44  45  50  51  80
          81  86  87 116 117
         122 123 152 153 158
         159 177 182 183 187
         188 189 193 194 195
         218 219 223 224 225
         )
        ;;


    # yap_greens_purples
    25) fgs=(
        120 121 122 123
        156 157 158 159

        165 171 177 183
        189 207 213 219
        225 
        )
       ;;


    # yap_pastels3
    26) fgs=(
         44  45  50  51  80
         81  86  87 111 116
        117 122 123 147 152
        153 158 159 177 182
        183 187 188 189 193
        194 195 218 219 223
        224 225 229
        )
        ;;

    # yap_blues
    27) fgs=( 81  117  159  123  87  51  45 )
        ;;

    # yap_pastels4
    28) fgs=(
        159 123 87 51 50 86 122 158 121 85 49
        )
        ;;

#----------------------------------------------------------------------#
# pastel rainbow.                                                      #
#----------------------------------------------------------------------#
    29|pastel*rainbow)
        fgs=( 219 183 147 153 159 158 157 193 229 223 217 )
        ;;

    # yap_rainbow_bright
    30|rainbow) fgs=( 201 93 21 33 51 48 46 118 226 208 196 198 )
        ;;

    # grayscale
    31|gray|grey) fgs=(
        255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240
        ) ;;

    32) compute_random_fgs ;;

    33) # one solid color
        compute_next_random
        fgs=( $next_color_idx )
        ;;

    34|fade) compute_fgs_fade ;;

    35|*) fgs=(
         46  41 36  31  26  21  57  62
         67  72 77  82 118 118 113 108
        103  98 93 129 134 139 144 149
        154 118 82
        )
        ;;

esac

follow_grab_colors
return
}


function follow_grab_colors
{
#----------------------------------------------------------------------#
# for easier reading syntax later on.                                  #
# ( seriously, 7 punctuation characters to get an array length?! )     #
#----------------------------------------------------------------------#
pound fgs # creates max-idx named $pound_fgs
color_idx=0
tput cup 0 0
vecho -n _idx
echo -n " "
vecho -n char_max
#----------------------------------------------------------------------#
# echo -n " "                                                          #
# vecho -n color_idx                                                   #
#----------------------------------------------------------------------#
return
}


function _show_colors
{
debug
local _x colpos
local _y idx line

(( _x = COLUMNS - 12 ))
_y=0
colpos=2
for idx in ${fgs[*]} ; do
    tput cup $_y $_x
    line=$( printf " %4.4s " $idx )
    printc -n black,$idx "$line"
    printc -n $idx,black "$line"
    (( _y += 1 ))
    if [[ $_y -ge $LINES ]]; then
        (( _x = COLUMNS - ( 11 * colpos ) ))
	(( colpos += 1 ))
	_y=0
	if [[ $_x -lt 0 ]]; then
	    return
        fi
    fi
done
}


function select_char
{
case $1$2 in
    -1-1) char=\\ ;;
    -10)  char=-  ;;
    -11)  char=/  ;;
    0-1)  char=\| ;;
    0-2)  char=\| ;;
    00)   char=@  ;;
    01)   char=\| ;;
    02)   char=\| ;;
    1-1)  char=/  ;;
    10)   char=-  ;;
    11)   char=\\ ;;
    *)    char=\* echo $1$2 ; echo -n "press any key..." ; read answer ;;
esac
}


function decode_color_idx
{
(( cidx = color_idx - 16 ))
(( r = cidx / 36 ))
(( g = ( cidx % 36 ) / 6 ))
(( b = cidx % 6 ))
}


#----------------------------------------------------------------------#
# calculate a default number of characters to print.                   #
#----------------------------------------------------------------------#
function compute_char_max
{
(( char_max = ( LINES * COLUMNS ) / 20 ))
}


#----------------------------------------------------------------------#
# MAIN                                                                 #
#----------------------------------------------------------------------#
debug

#----------------------------------------------------------------------#
# list functions.                                                      #
#----------------------------------------------------------------------#
if [[ $1 == -l ]]; then
    grep ^function $0 | fields 2 | sort
    exit
fi

# pick a bouncing ball character:
# clam10 and above
_ball=' '
_ball=@
_ball=•
_ball=☀
_ball=☁
_ball=★
_ball=☆
_ball=☼
_ball=☽
_ball=☾
_ball=♦
_ball=⚈
_ball=⚬
_ball=
_ball=⬤ 

_g=38
#----------------------------------------------------------------------#
# grab_colors $1                                                       #
# compute_char_max                                                     #
#----------------------------------------------------------------------#

